#!/usr/bin/env python
# coding:utf-8
#   NotiD is based on:
#   statnot - Status and Notifications
#
#   Lightweight notification-(to-become)-deamon intended to be used
#   with lightweight WMs, like dwm.
#   Receives Desktop Notifications (including libnotify / notify-send)
#   See: http://www.galago-project.org/specs/notification/0.9/index.html
#
#   Note: VERY early prototype, to get feedback.
#
#   Copyright (c) 2009-2011 by the authors
#   http://code.k2h.se
#   Please report bugs or feature requests by e-mail.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import dbus
import dbus.service
import dbus.mainloop.glib
import gobject
import os
import codecs
import subprocess
import sys
import thread
import time
from htmlentitydefs import name2codepoint as n2cp
import re

# ===== CONFIGURATION DEFAULTS =====
#
# See helpstring below for what each setting does

DEFAULT_NOTIFY_TIMEOUT = 3000 # milliseconds
MAX_NOTIFY_TIMEOUT = 5000 # milliseconds

SUPPORT_BODY=True
SUPPORT_ACTIONS=False
SUPPORT_HYPERLINKS=False
SUPPORT_IMAGES=False
SUPPORT_MARKUP=False
SUPPORT_ICON_STATIC=False
SUPPORT_ICON_MULTI=False
SUPPORT_SOUND=False

# ===== CONFIGURATION END =====

def update_text(text):
    print(unicode(text))


def _getconfigvalue(configmodule, name, default):
    if hasattr(configmodule, name):
        return getattr(configmodule, name)
    return default

def readconfig(filename):
    import imp
    try:
        config = imp.load_source("config", filename)
    except Exception as e:
        print "Error: failed to read config file %s" % filename
        print e
        sys.exit(2)

    for setting in ("DEFAULT_NOTIFY_TIMEOUT", "MAX_NOTIFY_TIMEOUT"):
        if hasattr(config, setting):
            globals()[setting] = getattr(config, setting)

def strip_tags(value):
  u'Return the given HTML with all tags stripped.'
  return re.sub(r'<[^>]*?>', '', value)

# from http://snipplr.com/view/19472/decode-html-entities/
# also on http://snippets.dzone.com/posts/show/4569
def substitute_entity(match):
  ent = match.group(3)
  if match.group(1) == "#":
    if match.group(2) == '':
      return unichr(int(ent))
    elif match.group(2) == 'x':
      return unichr(int('0x'+ent, 16))
  else:
    cp = n2cp.get(ent)
    if cp:
      return unichr(cp)
    else:
      return match.group()

def decode_htmlentities(string):
  entity_re = re.compile(r'&(#?)(x?)(\w+);')
  return entity_re.subn(substitute_entity, string)[0]

# List of not shown notifications.
# Array of arrays: [id, text, timeout in s]
# 0th element is being displayed right now, and may change
# Replacements of notification happens att add
# message_thread only checks first element for changes
notification_queue = []
notification_queue_lock = thread.allocate_lock()

def add_notification(notif):
    with notification_queue_lock:
        for index, n in enumerate(notification_queue):
            if n.id == notif.id: # same id, replace instead of queue
                n = notif
                return

        notification_queue.append(notif)

def next_notification():
    # No need to be thread safe here. Also most common scenario
    if not notification_queue:
        return False

    with notification_queue_lock:
        # If there are several pending messages, discard the first 0-timeouts
        while len(notification_queue) > 1 and notification_queue[0].duration == 0:
            notification_queue.pop(0)

        current_notification = notification_queue[0]
        notification_queue.pop(0)
        return current_notification

def message_thread(dummy):
    last_status_update = 0
    last_notification_update = 0
    current_notification_text = u''

    while 1:
        notif = next_notification()

        if notif:
            current_notification_text = notif.summary
            if current_notification_text != u'':
                update_text(notif)

        time.sleep(0.1)
def get_help():
    help_filename = u'help.txt'
    with codecs.open(help_filename,encoding='utf-8') as help_file:
        print help_file.read()

class notification:
    def __init__(self,app_name,notification_id,app_icon,summary,body,actions,hints,expire_timeout):
        self.app_name = app_name
        self.id = notification_id
        self.summary = summary
        self.hints = hints
        self.duration = expire_timeout
        self.body = body
        self.actions = actions
        self.app_icon = app_icon

    def get_actions(self):
        result = u''
        if (len(self.actions[0]) > 0):
            result += u'actions:'
            for index, item in self.actions[0]:
                result += unicode(item)
            result += u'\n'
        return result

    def print_val(self,value):
        if (isinstance(value,int)==True):
            converter = int(value)
            return unicode(converter)
        return unicode(value)

    def get_hints(self):
        result = u''
        if (len(self.hints[0]) > 0):
            result += u'hints:'
            for key, item in self.hints[0].items():
                result += unicode(key) + u' = ' + self.print_val(item) + u', '
            result += u'\n'
        return result

    def __unicode__(self):
        result = u'app:'+unicode(self.app_name)+u'\n'
        result += u'id:'+unicode(self.id)+u'\n'
        if SUPPORT_ICON_MULTI or SUPPORT_ICON_STATIC:
            result += u'icon:'+unicode(self.app_icon)+u'\n'
        result += u'summary:'+unicode(self.summary)+u'\n'
        if SUPPORT_BODY:
            result += u'body:'+unicode(self.body)+u'\n'
        if SUPPORT_ACTIONS:
            result += self.get_actions()
        result += self.get_hints()
        result += u'duration:'+unicode(self.duration)+u'\n'
        return result



class NotificationFetcher(dbus.service.Object):
    _id = 0

    @dbus.service.method(u'org.freedesktop.Notifications',
                         in_signature=u'susssasa{ss}i',
                         out_signature=u'u',byte_arrays=True,utf8_strings=True)
    def Notify(self, app_name, notification_id, app_icon,
               summary, body, actions, hints, expire_timeout):
        if (expire_timeout < 0) or (expire_timeout > MAX_NOTIFY_TIMEOUT):
            expire_timeout = DEFAULT_NOTIFY_TIMEOUT

        if not notification_id:
            self._id += 1
            notification_id = self._id

        output = notification(app_name,notification_id,app_icon,summary,body,actions,hints,expire_timeout)
        text = ("%s %s" % (summary, body)).strip()
        add_notification( output )
        return notification_id

    @dbus.service.method(u'org.freedesktop.Notifications', in_signature=u'', out_signature=u'as', utf8_strings=True)
    def GetCapabilities(self):
        result = []
        if SUPPORT_BODY:
            result.append(u'body')
        if SUPPORT_ACTIONS:
            result.append(u'actions')
        if SUPPORT_HYPERLINKS:
            result.append(u'body-hyperlinks')
        if SUPPORT_IMAGES:
            result.append(u'body-images')
        if SUPPORT_MARKUP:
            result.append(u'body-markup')
        if SUPPORT_ICON_MULTI:
            result.append(u'icon-multi')
        if SUPPORT_ICON_STATIC:
            result.append(u'icon-static')
        if SUPPORT_SOUND:
            result.append(u'sound')
        return (u'body')

    @dbus.service.signal(u'org.freedesktop.Notifications', signature=u'uu')
    def NotificationClosed(self, id_in, reason_in):
        pass

    @dbus.service.signal(u'org.freedesktop.Notifications', signature=u'us')
    def ActionInvoked(self, id, action_key):
        pass

    @dbus.service.method(u'org.freedesktop.Notifications', in_signature=u'u', out_signature=u'',utf8_strings=True)
    def CloseNotification(self, id):
        pass

    @dbus.service.method(u'org.freedesktop.Notifications', in_signature=u'', out_signature=u'ssss',utf8_strings=True)
    def GetServerInformation(self):
        return (u'NotiD', u'TELunus', u'0.0.2', u'1')

if __name__ == u'__main__':
    for curarg in sys.argv[1:]:
        if curarg in (u'-v', u'--version'):
            print u'%s CURVERSION' % sys.argv[0]
            sys.exit(1)
        elif curarg in (u'-h', u'--help'):
            get_help()
            sys.exit(1)
        elif (curarg == u'-m'):
            SUPPORT_MARKUP=True
        elif (curarg == u'-M'):
            SUPPORT_MARKUP=False
        elif (curarg == u'-b'):
            SUPPORT_BODY=True
        elif (curarg == u'-B'):
            SUPPORT_BODY=False
        elif (curarg == u'-c'):
            SUPPORT_ACTIONS=True
        elif (curarg == u'-C'):
            SUPPORT_ACTIONS=False
        elif (curarg == u'-g'):
            SUPPORT_IMAGES=True
        elif (curarg == u'-G'):
            SUPPORT_IMAGES=False
        elif (curarg == u'-s'):
            SUPPORT_SOUND=True
        elif (curarg == u'-S'):
            SUPPORT_SOUND=False
        elif (curarg == u'-l'):
            SUPPORT_HYPERLINKS=True
        elif (curarg == u'-L'):
            SUPPORT_HYPERLINKS=False
        elif (curarg == u'-i'):
            SUPPORT_ICON_MULTI=False
            SUPPORT_ICON_STATIC=True
        elif (curarg == u'-a'):
            SUPPORT_ICON_MULTI=True
            SUPPORT_ICON_STATIC=False
        elif (curarg == u'-x'):
            SUPPORT_ICON_MULTI=False
            SUPPORT_ICON_STATIC=False
        else:
            readconfig(curarg)

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    session_bus = dbus.SessionBus()
    name = dbus.service.BusName(u'org.freedesktop.Notifications', session_bus)
    nf = NotificationFetcher(session_bus, u'/org/freedesktop/Notifications')

    # We must use contexts and iterations to run threads
    # http://www.jejik.com/articles/2007/01/python-gstreamer_threading_and_the_main_loop/
    gobject.threads_init()
    context = gobject.MainLoop().get_context()
    thread.start_new_thread(message_thread, (None,))

    while 1:
        context.iteration(True)
